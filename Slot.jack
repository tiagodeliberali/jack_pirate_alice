class Slot {
    field int id, row, column;
    field Array neighbors;

    constructor Slot new(int setId, int totalRows, int totalColumns) {
        let id = setId;

        let row = setId / totalColumns;
        let column = GameMath.remainder(setId, totalColumns);

        let neighbors = Array.new(4);

        // setup walls
        if (~(row = 0)) {
            let neighbors[Wall.up()] = 1;
        }

        if (~(column = 0)) {
            let neighbors[Wall.left()] = 1;
        }

        if (~(row = (totalRows - 1))) {
            let neighbors[Wall.down()] = 1;
        }

        if (~(column = (totalColumns - 1))) {
            let neighbors[Wall.right()] = 1;
        }
        
        return this;
    }

    method void dispose() {
        do neighbors.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method void draw(int initialRow, int initialColumn) {
        var int drawRow, drawColumn, size, margin;
        let size = Wall.size();
        let margin = Wall.thickness();

        let drawRow = (initialRow + row) * size;
        let drawColumn = (initialColumn + column) * size;

        do Screen.setColor(true);
        do Screen.drawRectangle(drawColumn, drawRow, drawColumn + size, drawRow + size);

        do Screen.setColor(false);
        do Screen.drawRectangle(
            drawColumn + margin, 
            drawRow + margin, 
            drawColumn + size - margin, 
            drawRow + size - margin);

        return;
    }

    method int getNeighborType(int direction) {
        return neighbors[direction];
    }

    method boolean canMove(int direction) {
        return ~ (neighbors[direction] = 0); // avoid null neighbors
    }
}