class Treasure {
    field Maze maze;
    field int row, column;

    constructor Treasure new(Maze setMaze) {
        let maze = setMaze;
        let row = maze.getRows() - 1;
        let column = maze.getColumns() - 1;

        do draw();
        
        return this;
    }

    method void dispose() {
        // maze object will be diposed by game
        do Memory.deAlloc(this);
        return;
    }

    method void draw() {
        var int drawRow, drawColumn, memAddress;

        let drawRow = maze.getInitialRow() + row;
        let drawColumn = maze.getInitialColumn() + column;

        let memAddress = 16384 + (drawRow * 512) + drawColumn;

        do Screen.setColor(true);

        do Memory.poke(memAddress+96, 8184 | Memory.peek(memAddress+96));
        do Memory.poke(memAddress+128, 15020 | Memory.peek(memAddress+128));
        do Memory.poke(memAddress+160, 12300 | Memory.peek(memAddress+160));
        do Memory.poke(memAddress+192, 12300 | Memory.peek(memAddress+192));
        do Memory.poke(memAddress+224, 12684 | Memory.peek(memAddress+224));
        do Memory.poke(memAddress+256, 12020 | Memory.peek(memAddress+256));
        do Memory.poke(memAddress+288, 12684 | Memory.peek(memAddress+288));
        do Memory.poke(memAddress+320, 12300 | Memory.peek(memAddress+320));
        do Memory.poke(memAddress+352, 15020 | Memory.peek(memAddress+352));
        do Memory.poke(memAddress+384, 15020 | Memory.peek(memAddress+384));
        do Memory.poke(memAddress+416, 8184 | Memory.peek(memAddress+416));
    
        return;
    }

    method boolean found(Pirate pirate) {
        return (pirate.getRow() = row) & (pirate.getColumn() = column);
    }
}