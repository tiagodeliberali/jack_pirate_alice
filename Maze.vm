function Maze.new 2
push constant 5
call Memory.alloc 1
pop pointer 0
push argument 0
pop this 0
push argument 1
pop this 1
push argument 2
pop this 2
push argument 3
pop this 3
push this 2
push this 3
call Math.multiply 2
pop local 0
push local 0
call Array.new 1
pop this 4
label WHILE_EXP0
push local 1
push local 0
lt
not
if-goto WHILE_END0
push local 1
push this 4
add
push local 1
push this 2
push this 3
call Slot.new 3
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push pointer 0
return
function Maze.dispose 3
push argument 0
pop pointer 0
push this 2
push this 3
call Math.multiply 2
pop local 0
label WHILE_EXP0
push local 1
push local 0
lt
not
if-goto WHILE_END0
push local 1
push this 4
add
pop pointer 1
push that 0
pop local 2
push local 2
call Slot.dispose 1
pop temp 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
function Maze.draw 3
push argument 0
pop pointer 0
push this 2
push this 3
call Math.multiply 2
pop local 0
label WHILE_EXP0
push local 1
push local 0
lt
not
if-goto WHILE_END0
push local 1
push this 4
add
pop pointer 1
push that 0
pop local 2
push local 2
push this 0
push this 1
call Slot.draw 3
pop temp 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Maze.getSlot 0
push argument 0
pop pointer 0
push argument 1
push this 3
call Math.multiply 2
push argument 2
add
push this 4
add
pop pointer 1
push that 0
return
function Maze.getInitialRow 0
push argument 0
pop pointer 0
push this 0
return
function Maze.getInitialColumn 0
push argument 0
pop pointer 0
push this 1
return
