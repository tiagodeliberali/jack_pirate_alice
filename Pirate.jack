class Pirate {
    field int row, column;
    field Maze maze;
    field Rand rand;

    constructor Pirate new(int setRow, int setColumn, Maze setMaze) {
        let row = setRow;
        let column = setColumn;
        let maze = setMaze;

        do draw();

        let rand = Rand.new();

        return this;
    }

    method void dispose() {
        // maze object will be diposed by game
        do Memory.deAlloc(this);
        return;
    }

    method void draw() {
        var int drawRow, drawColumn, memAddress;

        do Screen.setColor(true);

        let drawRow = maze.getInitialRow() + row;
        let drawColumn = maze.getInitialColumn() + column;

        let memAddress = 16384 + (drawRow * 512) + drawColumn;

        do Memory.poke(memAddress+64, 2032 | Memory.peek(memAddress+64));
        do Memory.poke(memAddress+96, 3320 | Memory.peek(memAddress+96));
        do Memory.poke(memAddress+128, 6168 | Memory.peek(memAddress+128));
        do Memory.poke(memAddress+160, 6808 | Memory.peek(memAddress+160));
        do Memory.poke(memAddress+192, 4748 | Memory.peek(memAddress+192));
        do Memory.poke(memAddress+224, 6172 | Memory.peek(memAddress+224));
        do Memory.poke(memAddress+256, 1084 | Memory.peek(memAddress+256));
        do Memory.poke(memAddress+288, 992 | Memory.peek(memAddress+288));
        do Memory.poke(memAddress+320, 1584 | Memory.peek(memAddress+320));
        do Memory.poke(memAddress+352, 3960 | Memory.peek(memAddress+352));
        do Memory.poke(memAddress+384, 7020 | Memory.peek(memAddress+384));
        do Memory.poke(memAddress+416, 992 | Memory.peek(memAddress+416));
        do Memory.poke(memAddress+448, 1904 | Memory.peek(memAddress+448));

        return;
    }

    method void erase() {
        var int drawRow, drawColumn, size, margin;
        let size = Wall.size();
        let margin = Wall.thickness();

        let drawRow = (maze.getInitialRow() + row) * size;
        let drawColumn = (maze.getInitialColumn() + column) * size;

        do Screen.setColor(false);

        do Screen.drawRectangle(
            drawColumn +  margin,
            drawRow + margin,
            drawColumn + size - margin,
            drawRow + size - margin);
        return;
    }

    method void move(int key) {
        var Slot slot;
        var boolean keyDownPressed;

        let keyDownPressed = (key = 87);

        let slot = maze.getSlot(row, column);

        do erase();

        // A
        if ((key = 65) & slot.canMove(Wall.left())) {
            let column = column - 1;
        }

        // D
        if ((key = 68) & slot.canMove(Wall.right())) {
            let column = column + 1;
        }

        // W
        if ((key = 87) & slot.canMove(Wall.up())) {
            let row = row - 1;
        }

        // S
        if ((key = 83) & slot.canMove(Wall.down())) {
            let row = row + 1;
        }

        do draw();

        return;
    }

    method int getRow() {
        return row;
    }

    method int getColumn() {
        return column;
    }
}