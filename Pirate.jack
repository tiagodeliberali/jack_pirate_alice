class Pirate {
    field int row, column;
    field Maze maze;
    field Rand rand;

    constructor Pirate new(int setRow, int setColumn, Maze setMaze) {
        let row = setRow;
        let column = setColumn;
        let maze = setMaze;

        do draw();

        let rand = Rand.new();

        return this;
    }

    method void dispose() {
        // maze object will be diposed by game
        do Memory.deAlloc(this);
        return;
    }

    method void drawPirate() {
        var int drawRow, drawColumn, size, margin;
        let size = Wall.size();
        let margin = Wall.thickness();

        let drawRow = (maze.getInitialRow() + row) * size;
        let drawColumn = (maze.getInitialColumn() + column) * size;

        do Screen.drawRectangle(
            drawColumn + (2 * margin),
            drawRow + (2 * margin),
            drawColumn + size - (2 * margin),
            drawRow + size - (2 * margin));

        return;
    }

    method void draw() {
        do Screen.setColor(true);
        do drawPirate();
        return;
    }

    method void erase() {
        do Screen.setColor(false);
        do drawPirate();
        return;
    }

    method void move(int key) {
        var Slot slot;
        var boolean keyDownPressed;

        let keyDownPressed = (key = 87);

        let slot = maze.getSlot(row, column);

        do erase();

        // A
        if ((key = 65) & slot.canMove(Wall.left())) {
            let column = column - 1;
        }

        // D
        if ((key = 68) & slot.canMove(Wall.right())) {
            let column = column + 1;
        }

        // W
        if ((key = 87) & slot.canMove(Wall.up())) {
            let row = row - 1;
        }

        // S
        if ((key = 83) & slot.canMove(Wall.down())) {
            let row = row + 1;
        }

        do draw();

        return;
    }

    method int getRow() {
        return row;
    }

    method int getColumn() {
        return column;
    }
}